name: Notify Insider Flow

on:
  schedule:
    - cron: '0 12 * * *'  # 8:00 AM EDT
  workflow_dispatch:

jobs:
  notify:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install deps
        run: pip install requests

      - name: Send Telegram
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          python -c "
import json, os, requests
from datetime import datetime, timedelta

try:
  with open('insider_flow.json') as f:
    data = json.load(f)
  top_buys = data['top_buys']
  top_sells = data['top_sells']
  total_buys = data['total_buys']
  total_sells = data['total_sells']

  # Calculate the 5-day date range ending today
  end_date = datetime.today().replace(hour=0, minute=0, second=0, microsecond=0).strftime('%B %d, %Y')  # June 29, 2025
  start_date = (datetime.today() - timedelta(days=5)).replace(hour=0, minute=0, second=0, microsecond=0).strftime('%B %d, %Y')  # June 24, 2025
  date_range = f'{start_date}–{end_date}'  # June 24–June 29, 2025
  print(f'Debug: start_date={start_date}, end_date={end_date}')

  # Calculate bias percentages with higher precision
  total_value = float(total_buys) + float(total_sells)  # Explicit float conversion
  buy_pct = round((float(total_buys) / total_value * 100), 4)
  sell_pct = round((float(total_sells) / total_value * 100), 4)
  bias_label = 'Neutral Bias' if abs(buy_pct - sell_pct) < 1 else ('Buy-Side Bias' if buy_pct > sell_pct else 'Sell-Side Bias')
  bias_detail = f'{bias_label} ({sell_pct:.2f}% sell, {buy_pct:.2f}% buy) 👀'

  # Format the message
  msg = f'''
  📊 Insider Flow Summary ({date_range})

  💰 Top Buys: ${top_buys:,.2f}
  💥 Top Sells: ${top_sells:,.2f}

  🧮 Total Buys: ${total_buys:,.2f} | Total Sells: ${total_sells:,.2f}
  📉 {bias_detail}
  '''

  url = f'https://api.telegram.org/bot{os.getenv('TELEGRAM_BOT_TOKEN')}/sendMessage'
  response = requests.post(url, json={'chat_id': os.getenv('TELEGRAM_CHAT_ID'), 'text': msg})
  response.raise_for_status()
  print('✅ Telegram sent!')
except Exception as e:
  print(f'❌ Error: {e}')
  raise
"